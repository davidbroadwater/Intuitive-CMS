__author__ = 'elisabethpaulson'

from TwitterSBA import *
from SBA_text_analysis_gensim import *

####### RELATE TWITTER DATA TO SBA WEB CONTENT #################

# IMPORT CORPUS FROM FEMA WEBSITE
corpus=corpora.MmCorpus("SBA.mm")

# TF-IDF
corpus_tfidf=tfidf2[corpus]

#Run LSI, HDP, or LDA model on corpus from FEMA website. Uses topics generated by tweets and scores FEMA content according to these topics
### FIND WHICH DOCUMENTS FROM FEMA SITE ARE SIMILAR TO TOPICS FROM TWEETS
corpus_lda=lda2[corpus_tfidf]

dictionary=corpora.Dictionary.load("SBA.dict")

m=-1
for doc in corpus_lda: #scans through content on SBA's site
    m=m+1
    doc=sorted(doc,key=lambda  item: -item[1])
    if doc!=[]:
        if doc[0][1]>.5: #specify a similarity score threshold
            print standard_links[m],' relates to topic ', doc[0][0]


# ### FIND WHICH DOCUMENTS BEST MATCH EACH TOPIC
# for i in range(50):
#     string=''
#     for j in range(6):
#         string+=' '+lda.show_topic(i,6)[j][1]
#     print string
#     # FIND WHAT TOPIC BEST MATCHES TERM
#     doc=string #Make up query term
#     vec_bow=dictionary.doc2bow(doc.upper().split())
#     print doc.upper().split()
#     print vec_bow
#     vec_lsi=FEMAlsi[vec_bow]
#     print(vec_lsi) # print vector that scores each document according to how well it matches query
#
#     # WHICH WHICH DOCUMENT BEST MATCHES TERM
#     #index=similarities.MatrixSimilarity(FEMAlsi[FEMAcorpus])
#     #print index
#     #index.save('FEMA.index')
#     index=similarities.MatrixSimilarity.load('FEMA.index')
#
#     # PRINT TOP 5 FEMA DOCUMENTS THAT BEST MATCH QUERY TERM
#     sims=index[vec_lsi]
#     sims=sorted(enumerate(sims),key=lambda  item: -item[1])
#     pprint(sims[:2])
#     for i in sims[:2]:
#        print(standard_descriptions[i[0]])
#        print(standard_links[i[0]])